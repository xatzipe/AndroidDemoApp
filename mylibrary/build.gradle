plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

apply from: "$project.rootDir/jacoco.gradle"

android {
    namespace 'com.github.xatzipe.mylibrary'
    compileSdk 33

    defaultConfig {
        minSdkVersion 24

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lint {
        lintConfig file('lint.xml')
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

task generateApiDoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs

    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += files(ext.androidJar)

    options.links("http://docs.oracle.com/javase/7/docs/api/");
    options.links("http://d.android.com/reference/");

    destinationDir = file("../docs/javadoc/")
    failOnError false
}

tasks.withType(Test) {
    testLogging {
        events "standardOut", "passed", "skipped", "failed"
    }
}

afterEvaluate {
    generateApiDoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath.files
    })
}