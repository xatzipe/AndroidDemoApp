buildscript {
    ext {
        lifecycle = '2.6.1'
        room = '2.5.1'
    }
}

plugins {
    id 'com.android.application' version '7.4.2' apply false
    id 'com.android.library' version '7.4.2' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.10' apply false
    id 'androidx.navigation.safeargs' version '2.5.2' apply false
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "4.0.0.2929"
    id 'org.jetbrains.dokka' version "1.8.10"
    id 'maven-publish'
}

subprojects {
    apply plugin: 'org.sonarqube'
//    apply from: "$project.rootDir/sonar.gradle"
//    sonar {
//        properties {
//            property 'sonar.coverage.jacoco.xmlReportPaths', "$projectDir.parentFile.path/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
//        }
//    }

    sonar {
        properties {
            property "sonar.tests", "src/test/java"
            property "sonar.test.inclusions", "**/*Test*/**"
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.sources", "src/main/java"
            property "sonar.exclusions", '**/*Test*/**,' +
                    'build/**' +
                    '*.json,' +
                    '**/*test*/**,' +
                    '**/.gradle/**,' +
                    '**/R.class'
            property "sonar.java.coveragePlugin", "jacoco"
            property "sonar.junit.reportPaths", "**/test-results/**/*.xml"
            property "sonar.coverage.jacoco.xmlReportPaths", "**/reports/**/codeCoverageReport/**/codeCoverageReport.xml"
            property "sonar.coverage.exclusions", "${coverageExclusions.join(', ')}"
        }
    }

    project(':mylibrary') {
        apply plugin: 'maven-publish'
//        apply plugin: 'java'
//        publishing {
//            publications {
//                release(MavenPublication) {
//                    groupId = 'com.github.xatzipe'
//                    artifactId = 'mylibrary'
//                    version = '1.1'
//                }
//            }
//        }
        publishing {
            publications {
                gpr(MavenPublication) {
                    artifactId project.name
                    artifact jar
                }
            }
        }
    }
}

apply from: "$project.rootDir/sonar.gradle"

//// See here for more info: https://docs.gradle.org/6.4-rc-1/samples/sample_jvm_multi_project_with_code_coverage.html
////
//// task to gather code coverage from multiple subprojects
//// NOTE: the `JacocoReport` tasks do *not* depend on the `test` task by default. Meaning you have to ensure
//// that `test` (or other tasks generating code coverage) run before generating the report.
//// You can achieve this by calling the `test` lifecycle task manually
//// $ ./gradlew test codeCoverageReport
//tasks.register("codeCoverageReport", JacocoReport) {
//    // If a subproject applies the 'jacoco' plugin, add the result it to the report
//    subprojects { subproject ->
//        subproject.plugins.withType(JacocoPlugin).configureEach {
//            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
//                //the jacoco extension may be disabled for some projects
//                if (testTask.extensions.getByType(JacocoTaskExtension).isEnabled()) {
////                    sourceSets subproject.sourceSets.main
//                    executionData(testTask)
//                } else {
//                    logger.warn('Jacoco extension is disabled for test task \'{}\' in project \'{}\'. this test task will be excluded from jacoco report.',testTask.getName(),subproject.getName())
//                }
//            }
//
//            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
//            // you may want to set up a task dependency between them as shown below.
//            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
//            // may have a negative effect on the configuration time of your build.
//            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
//                rootProject.tasks.codeCoverageReport.dependsOn(it)
//            }
//        }
//    }
//
//    // enable the different report types (html, xml, csv)
//    reports {
//        xml.required = true
//        html.required = true
//        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
//    }
//}
